#+author: Amchelle Clendenin
#+email: amchelle.clendenin@utexas.edu
#+startup: content

* Eloquent Javascript
** Program Structure
*** Looping a Triangle**** Problem statement

Write a loop that makes seven calls to console.log to output the following
triangle:

#+BEGIN_SRC fundamental
  #
  ##
  ###
  ####
  #####
  ######
  #######
#+END_SRC

**** Iterative solution

First solution

#+BEGIN_SRC javascript :tangle triangle-looping.js
  for (let x = '#'; x.length < 8; x += '#') {
      console.log(x)
  }
#+END_SRC

| Downside                              | Solution             |
|---------------------------------------+----------------------|
| string.length can be a slow operation | use numeric iterator |

#+BEGIN_SRC javascript :tangle triangle-looping-integer-iterator.js
  let str = '#'
  for (let i = 0; i < 8; i++) {
      console.log(str)
      str += '#'
  }
#+END_SRC

**** Recursive solution

Advantages:
  - no state
  - no side effects

#+BEGIN_VERSE
  re·cur·sive (/adj/)
     - relating to a routine whose interpretation requires its own application
#+END_VERSE

Recursive solutions will have
  1. a base-case
  2. unit of work
  3. recursive call with changed value

#+BEGIN_SRC javascript :tangle triangle-recursive.js
  function triangle(len) {
      // 1. define base case
      if (len > 7) { return }

      // 2. do work
      console.log('#'.repeat(len))

      // 3. recurse
      triangle(len + 1)
  }

  triangle(1)
#+END_SRC

| Downside                                               | Solution                                                                                    |
|--------------------------------------------------------+---------------------------------------------------------------------------------------------|
| can only generate triangles (or frustrums) of length 8 | remove hard-coded limit inside the function, pass a parameter with this information instead |

#+BEGIN_SRC javascript :tangle triangle-recursive-general.js
  // Print a triangle of arbitrary length
  function triangle(len, layer = 1) {

      console.log('#'.repeat(layer))
      if (layer > len) { return }
      triangle(len, layer + 1)
  }

  triangle(5)
#+END_SRC


*** FizzBuzz**** Problem Statement

Write a program that uses console.log to print all the numbers from 1 to 100,
with two exceptions. For numbers divisible by 3, print "Fizz" instead of the
number, and for numbers divisible by 5 (and not 3), print "Buzz" instead.
When you have that working, modify your program to print "FizzBuzz" for
numbers that are divisible by both 3 and 5 (and still print "Fizz" or "Buzz"
for numbers divisible by only one of those).

(This is actually an interview question that has been claimed to weed out
a significant percentage of programmer candidates. So if you solved it, your
labor market value just went up.):

**** Iterative solution
#+BEGIN_SRC javascript :tangle fizzbuzz-iterative.js
  let num = 1
  for (let i = 0; i<100; i++) {
      if (num % 5 == 0 && num % 3 == 0) {
          console.log('FizzBuzz')
      }
      else if(num % 5 == 0 && num % 3 !== 0) {
          console.log('Buzz')
      }
      else if(num % 3 == 0) {
          console.log('Fizz')
      }
      else { (console.log(num))
      }
      num += 1
  }
#+END_SRC
**** Functional solution
#+BEGIN_SRC javascript :tangle fizzbuzz-functional.js
  const _ = require('lodash')

  _.each(_.range(1, 101), fizzbuzz)

  function fizzbuzz(num) {
      if (num % 5 == 0 && num % 3 == 0) {
          console.log('FizzBuzz')
      }
      else if(num % 5 == 0 && num % 3 !== 0) {
          console.log('Buzz')
      }
      else if(num % 3 == 0) {
          console.log('Fizz')
      }
      else {
          console.log(num)
      }
  }
#+END_SRC

*** Chess
* File variables                                                   :noexport:
# Local Variables:
# eval: (add-hook 'after-save-hook 'org-babel-tangle t t)
# End:
